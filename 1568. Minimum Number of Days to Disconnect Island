class Solution {
    public int minDays(int[][] grid) {
        int n = countIsland(grid);
        if (n > 1 || n == 0) {
            return 0;
        } else {
            for (int i = 0; i < grid.length; i++) {
                for (int j = 0; j < grid[i].length; j++) {
                    if (grid[i][j] == 1) {
                        grid[i][j] = 0;
                        n = countIsland(grid);
                        if (n > 1 || n == 0) {
                            return 1;
                        }
                        grid[i][j] = 1;
                    }
                }
            }
        }
        return 2;
    }

    public int countIsland(int[][] grid) {
        int res = 0;
        int n = grid.length;
        int m = grid[0].length;
        int[][] gridClone = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                gridClone[i][j] = grid[i][j];
            }
        }

        for (int i = 0; i < gridClone.length; i++) {
            for (int j = 0; j < gridClone[0].length; j++) {
                if (gridClone[i][j] == 1) {
                    dfs(gridClone, i, j);
                    res++;
                }
            }
        }
        return res;
    }

    public void dfs(int[][] grid, int i, int j) {
        if (i < 0 || i == grid.length || j < 0 || j == grid[0].length) {
            return;
        }
        if (grid[i][j] == 0) {
            return;
        }
        grid[i][j] = 0;
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
}
