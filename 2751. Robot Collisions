class Solution {
    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        for (int i = 0; i < positions.length; i++) {
            hm.put(positions[i], i);
        }
        List<Integer> ans = new ArrayList<>();
        Arrays.sort(positions);
        Stack<Integer> stk = new Stack<>();
        for (int i = 0; i < positions.length; i++) {
            if (stk.isEmpty()) {
                stk.push(positions[i]);
            } else {
                if (directions.charAt(hm.get(stk.peek())) == 'R' && directions.charAt(hm.get(positions[i])) == 'L') {
                    while (!stk.isEmpty()) {
                        if (healths[hm.get(stk.peek())] > healths[hm.get(positions[i])]) {
                            healths[hm.get(stk.peek())]--;
                            healths[hm.get(positions[i])] = 0;
                            break;
                        } else if (healths[hm.get(stk.peek())] < healths[hm.get(positions[i])]) {
                            healths[hm.get(stk.pop())] = 0;
                            healths[hm.get(positions[i])]--;
                            if (!stk.isEmpty() && directions.charAt(hm.get(stk.peek())) != 'R') {
                                stk.push(positions[i]);
                                break;
                            } else if (stk.isEmpty()) {
                                stk.push(positions[i]);
                                break;
                            }
                        } else {
                            healths[hm.get(stk.pop())] = 0;
                            healths[hm.get(positions[i])] = 0;
                            break;
                        }
                    }
                } else {
                    stk.push(positions[i]);
                }
            }
        }
        for (int i = 0; i < healths.length; i++) {
            if (healths[i] > 0)
                ans.add(healths[i]);
        }
        return ans;
    }
}
