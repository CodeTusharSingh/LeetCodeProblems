class Solution {
    public int[][] merge(int[][] intervals) {
        int n = intervals.length;
        for (int i = 0; i < n - 1; i++) {
            int min = i;
            for (int j = i + 1; j < n; j++) {
                if (intervals[j][0] < intervals[min][0]) {
                    min = j;
                }
            }
            int[] temp = intervals[min];
            intervals[min] = intervals[i];
            intervals[i] = temp;
        }
        ArrayList<int[]> arr = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                arr.add(intervals[i]);
            } else {
                if (intervals[i][0] <= arr.get(arr.size() - 1)[1]) {
                    arr.get(arr.size() - 1)[1] = Math.max(arr.get(arr.size() - 1)[1], intervals[i][1]);
                } else {
                    arr.add(intervals[i]);
                }
            }
        }
        return arr.toArray(int[][] ::new);
    }
}
