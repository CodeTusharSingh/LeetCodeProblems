class Solution {
    List<Integer> arr = new ArrayList<>();

    public boolean evaluateTree(TreeNode root) {
        postOrder(root);
        return arr.get(0) == 1? true : false;
    }

    public void postOrder(TreeNode root) {
        if (root == null) {
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        arr.add(root.val);
        if (arr.get(arr.size() - 1) == 2) {
            if (arr.get(arr.size() - 3) == 0 && arr.get(arr.size() - 2) == 0) {
                arr.set(arr.size() - 1, 0);
            } else if (arr.get(arr.size() - 3) == 1 && arr.get(arr.size() - 2) == 0) {
                arr.set(arr.size() - 1, 1);
            } else if (arr.get(arr.size() - 3) == 1 && arr.get(arr.size() - 2) == 1) {
                arr.set(arr.size() - 1, 1);
            } else if (arr.get(arr.size() - 3) == 0 && arr.get(arr.size() - 2) == 1) {
                arr.set(arr.size() - 1, 1);
            }
            arr.remove(arr.size()-3);
            arr.remove(arr.size()-2);
        } else if (arr.get(arr.size() - 1) == 3) {
            if (arr.get(arr.size() - 3) == 0 && arr.get(arr.size() - 2) == 0) {
                arr.set(arr.size() - 1, 0);
            } else if (arr.get(arr.size() - 3) == 1 && arr.get(arr.size() - 2) == 0) {
                arr.set(arr.size() - 1, 0);
            } else if (arr.get(arr.size() - 3) == 1 && arr.get(arr.size() - 2) == 1) {
                arr.set(arr.size() - 1, 1);
            } else if (arr.get(arr.size() - 3) == 0 && arr.get(arr.size() - 2) == 1) {
                arr.set(arr.size() - 1, 0);
            }
            arr.remove(arr.size()-3);
            arr.remove(arr.size()-2);
        } 
    }
}
