class Solution {
    public int maximalSquare(char[][] matrix) {
 int[][] idx = new int[matrix.length][matrix[0].length];
        int i = matrix.length - 1;
        int j = matrix[0].length - 1;
        int x = matrix.length - 1;
        int y = matrix[0].length - 1;
        if (matrix.length == 1) {
            int ans = 0;
            for (int p = 0; p < matrix[0].length; p++) {
                if (matrix[0][p] == '1') {
                    ans = 1;
                    break;
                }
            }
            return ans;
        }
        if (matrix[0].length == 1) {
            int ans = 0;
            for (int p = 0; p < matrix.length; p++) {
                if (matrix[p][0] == '1') {
                    ans = 1;
                    break;
                }
            }
            return ans;
        }
        if (i > j) {
            if ((matrix.length - matrix[0].length) == 1) {
                for (int p = 0; p < matrix[0].length; p++) {
                    if (matrix[i][p] == '1') {
                        idx[i][p] = 1;
                    } else {
                        idx[i][p] = 0;
                    }
                }
                i = i - 1;
                x = x - 1;
            } else {
                 
                while (i >= ((matrix.length - matrix[0].length) + 1) && j >= 0) {
                    if ((i == x) && (j == y)) {
         
                        if (matrix[i][j] == '1') {
                            if (j == matrix[0].length - 1 || i == matrix.length - 1) {
                                idx[i][j] = 1;
                            } else {
                                if (matrix[i][j + 1] == '1' && matrix[i + 1][j] == '1' && matrix[i + 1][j +
                                        1] == '1') {
                                    int min = idx[i + 1][j];
                                    if ((idx[i + 1][j] == idx[i][j + 1]) && (idx[i + 1][j] == idx[i + 1][j + 1])
                                            && (idx[i + 1][j + 1] == idx[i][j + 1])) {
                                        idx[i][j] = idx[i + 1][j] + 1;
                                    } else {
                                        if (idx[i][j + 1] < min) {
                                            min = idx[i][j + 1];
                                        }
                                        if (idx[i + 1][j + 1] < min) {
                                            min = idx[i + 1][j + 1];
                                        }
                                        idx[i][j] = min + 1;
                                    }
                                } else {
                                    idx[i][j] = 1;
                                }
                            }
                        } else {
                            idx[i][j] = 0;
                        }
                        j--;
                    } else {
         
                        if (matrix[i][j] == '1') {
                            if ((i == matrix.length - 1) || (j == matrix[0].length - 1)) {
                                idx[i][j] = 1;
                            } else {
                                if (matrix[i][j + 1] == '1' && matrix[i + 1][j] == '1' && matrix[i + 1][j +
                                        1] == '1') {
                                    int min = idx[i + 1][j];
                                    if ((idx[i + 1][j] == idx[i][j + 1]) && (idx[i + 1][j] == idx[i + 1][j + 1])
                                            && (idx[i + 1][j + 1] == idx[i][j + 1])) {
                                        idx[i][j] = idx[i + 1][j] + 1;
                                    } else {
                                        if (idx[i][j + 1] < min) {
                                            min = idx[i][j + 1];
                                        }
                                        if (idx[i + 1][j + 1] < min) {
                                            min = idx[i + 1][j + 1];
                                        }
                                        idx[i][j] = min + 1;
                                    }
                                } else {
                                    idx[i][j] = 1;
                                }
                            }
                        } else {
                            idx[i][j] = 0;
                        }
                        if (i == ((matrix.length - matrix[0].length) + 1) && j == y) {
                            x--;
                            y--;
                            i = x;
                            j = y;
                        } else if (j == 0) {
                            j = y;
                            i--;
                        } else if (j == y) {
                            i--;
                        } else {
                            j--;
                        }
                    }
                }
                x = matrix.length - matrix[0].length;
                i = x;
                j = matrix[0].length - 1;
                y = matrix[0].length - 1;
            }
        }

        // ----------------------------------------------------------------------------------------------------------------------------------

        while (i >= 0 && j >= 0) {
            if ((i == x) && (j == y)) {
         
                if (matrix[i][j] == '1') {
                    if (j == matrix[0].length - 1 || i == matrix.length - 1) {
                        idx[i][j] = 1;
                    } else {
                        if (matrix[i][j + 1] == '1' && matrix[i + 1][j] == '1' && matrix[i + 1][j +
                                1] == '1') {
                            int min = idx[i + 1][j];
                            if ((idx[i + 1][j] == idx[i][j + 1]) && (idx[i + 1][j] == idx[i + 1][j + 1])
                                    && (idx[i + 1][j + 1] == idx[i][j + 1])) {
                                idx[i][j] = idx[i + 1][j] + 1;
                            } else {
                                if (idx[i][j + 1] < min) {
                                    min = idx[i][j + 1];
                                }
                                if (idx[i + 1][j + 1] < min) {
                                    min = idx[i + 1][j + 1];
                                }
                                idx[i][j] = min + 1;
                            }
                        } else {
                            idx[i][j] = 1;
                        }
                    }
                } else {
                    idx[i][j] = 0;
                }
                j--;
            } else {
         
                if (matrix[i][j] == '1') {
                    if ((i == matrix.length - 1) || (j == matrix[0].length - 1)) {
                        idx[i][j] = 1;
                    } else {
                        if (matrix[i][j + 1] == '1' && matrix[i + 1][j] == '1' && matrix[i + 1][j +
                                1] == '1') {
                            int min = idx[i + 1][j];
                            if ((idx[i + 1][j] == idx[i][j + 1]) && (idx[i + 1][j] == idx[i + 1][j + 1])
                                    && (idx[i + 1][j + 1] == idx[i][j + 1])) {
                                idx[i][j] = idx[i + 1][j] + 1;
                            } else {
                                if (idx[i][j + 1] < min) {
                                    min = idx[i][j + 1];
                                }
                                if (idx[i + 1][j + 1] < min) {
                                    min = idx[i + 1][j + 1];
                                }
                                idx[i][j] = min + 1;
                            }
                        } else {
                            idx[i][j] = 1;
                        }
                    }
                } else {
                    idx[i][j] = 0;
                }
                if (i == 0 && j == y) {
                    x--;
                    y--;
                    i = x;
                    j = y;
                } else if (j == 0) {
                    j = y;
                    i--;
                } else if (j == y) {
                    i--;
                } else {
                    j--;
                }
            }
        }

        int maximum = idx[0][0];
        for (int k = 0; k < matrix.length; k++) {
            for (int m = 0; m < matrix[k].length; m++) {
         
                if (maximum < idx[k][m]) {
                    maximum = idx[k][m];
                }
            }
         
        }
        return maximum * maximum;
    }
}
